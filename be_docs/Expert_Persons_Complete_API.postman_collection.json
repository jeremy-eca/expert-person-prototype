{
	"info": {
		"_postman_id": "expert-persons-complete-api",
		"name": "Expert Persons Complete API",
		"description": "Comprehensive collection for the Expert Persons API with HMAC authentication.\n\n## Authentication\nAll endpoints require HMAC-SHA256 authentication with the following headers:\n- `x-client-id`: Client identifier for AWS Secrets Manager lookup\n- `x-signature`: Base64-encoded HMAC-SHA256 signature\n- `x-timestamp`: Unix timestamp in milliseconds\n- `x-tenant-id`: Tenant identifier (UUID or 'global')\n\n## Environment Variables\nSet up the following environment variables:\n- `baseUrl`: API base URL (e.g., http://localhost:3001/api)\n- `clientId`: Your client ID\n- `clientSecret`: Your client secret\n- `tenantId`: Your tenant ID\n\n## Pre-request Script\nThe collection includes a pre-request script that automatically generates HMAC signatures for all requests.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"auth": {
		"type": "noauth"
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// FINAL WORKING HMAC Authentication Pre-request Script for Expert Global API",
					"const CryptoJS = require('crypto-js');",
					"",
					"const timestamp = Date.now().toString();",
					"pm.environment.set('timestamp', timestamp);",
					"",
					"//const clientId = pm.environment.get('clientId');",
					"//const secretKey = pm.environment.get('clientKey'); // Your environment variable name",
					"//const tenantId = pm.environment.get('tenantId') || 'global';",
					"",
					"const clientId = 'expert-core';",
					"const secretKey = 'jH3E2kK28sD9vL9kqP1sT5qQ7wA3zX2r';",
					"const tenantId = '01958944-0916-78c8-978d-d2707b71e17d';",
					"",
					"console.log('Environment variables:');",
					"console.log('clientId:', clientId);",
					"console.log('secretKey:', secretKey ? 'SET' : 'MISSING');",
					"console.log('tenantId:', tenantId);",
					"",
					"if (!clientId || !secretKey) {",
					"    console.error('Missing clientId or secretKey in environment variables');",
					"    return;",
					"}",
					"",
					"const method = pm.request.method.toLowerCase();",
					"let stringToSign;",
					"",
					"if (['post', 'put', 'patch', 'delete'].includes(method) && ",
					"    pm.request.body && pm.request.body.raw && pm.request.body.raw.length > 0) {",
					"    const body = pm.request.body.raw;",
					"    let bodyObj;",
					"    try {",
					"        bodyObj = JSON.parse(body);",
					"        stringToSign = JSON.stringify(bodyObj) + timestamp;",
					"    } catch (e) {",
					"        stringToSign = body + timestamp;",
					"    }",
					"    console.log('HMAC check via body');",
					"} else {",
					"    // CRITICAL FIX: Server strips /api prefix",
					"    let path = '/' + pm.request.url.path.join('/');",
					"    if (path.startsWith('/api/')) {",
					"        path = path.substring(4); // Remove '/api' prefix",
					"    }",
					"    stringToSign = path.toLowerCase() + timestamp;",
					"    console.log('HMAC check via path (server strips /api):', path);",
					"}",
					"",
					"const signature = CryptoJS.HmacSHA256(stringToSign, secretKey).toString(CryptoJS.enc.Base64);",
					"",
					"console.log('String to sign:', stringToSign);",
					"console.log('Generated signature:', signature);",
					"",
					"// Clear and set headers",
					"pm.request.headers.remove('x-client-id');",
					"pm.request.headers.remove('x-signature');",
					"pm.request.headers.remove('x-timestamp');",
					"pm.request.headers.remove('x-tenant-id');",
					"pm.request.headers.remove('Content-Type');",
					"",
					"pm.request.headers.add({key: 'x-client-id', value: clientId});",
					"pm.request.headers.add({key: 'x-signature', value: signature});",
					"pm.request.headers.add({key: 'x-timestamp', value: timestamp});",
					"pm.request.headers.add({key: 'x-tenant-id', value: tenantId});",
					"pm.request.headers.add({key: 'Content-Type', value: 'application/json'});",
					"",
					"console.log('HMAC headers set:', {",
					"    'x-client-id': clientId,",
					"    'x-timestamp': timestamp,",
					"    'x-tenant-id': tenantId,",
					"    'method': method,",
					"    'stringToSign': stringToSign",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3001/api",
			"type": "string"
		},
		{
			"key": "personId",
			"value": "550e8400-e29b-41d4-a716-446655440000",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Generate Test Token (Dev Only)",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"tenant_id\": \"01958944-0916-78c8-978d-d2707b71e17d\",\n  \"user_id\": \"8b9fcf5e-63d6-4c63-9b5d-40e6f73b05a1\",\n  \"role\": \"admin\",\n  \"username\": \"test_user\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/test-token",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"test-token"
							]
						},
						"description": "Generate test JWT token (development only)"
					}
				},
				{
					"name": "Generate HMAC Token (Dev Only)",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"tenant_id\": \"01958944-0916-78c8-978d-d2707b71e17d\",\n  \"user_id\": \"8b9fcf5e-63d6-4c63-9b5d-40e6f73b05a1\",\n  \"service\": \"expert-persons\",\n  \"expires_in\": \"24h\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/hmac-token",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"hmac-token"
							]
						},
						"description": "Generate HMAC service token (development only)"
					}
				}
			]
		},
		{
			"name": "Persons",
			"item": [
				{
					"name": "Get All Persons",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/persons?limit=50&offset=0&include=addresses,employment,contact-details",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"persons"
							],
							"query": [
								{
									"key": "limit",
									"value": "50"
								},
								{
									"key": "offset",
									"value": "0"
								},
								{
									"key": "include",
									"value": "addresses,employment,contact-details"
								}
							]
						},
						"description": "Get all persons with composite data"
					}
				},
				{
					"name": "Get Person by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/persons/{{personId}}?include=addresses,employment,contact-details,passports",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"persons",
								"{{personId}}"
							],
							"query": [
								{
									"key": "include",
									"value": "addresses,employment,contact-details,passports"
								}
							]
						},
						"description": "Get single person with complete composite data"
					}
				},
				{
					"name": "Create Person",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"first_name\": \"John\",\n  \"last_name\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"bio\": \"Software engineer with 5 years experience\",\n  \"middle_name\": \"Albert\",\n  \"date_of_birth\": \"1990-01-15\",\n  \"gender\": \"male\",\n  \"nationality\": \"UK\",\n  \"status\": \"active\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/persons",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"persons"
							]
						},
						"description": "Create a new person"
					}
				},
				{
					"name": "Update Person",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"first_name\": \"John\",\n  \"last_name\": \"Smith\",\n  \"email\": \"john.smith@example.com\",\n  \"bio\": \"Senior software engineer with 7 years experience\",\n  \"status\": \"active\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/persons/{{personId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"persons",
								"{{personId}}"
							]
						},
						"description": "Update person information"
					}
				},
				{
					"name": "Delete Person",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/persons/{{personId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"persons",
								"{{personId}}"
							]
						},
						"description": "Soft delete a person"
					}
				}
			]
		},
		{
			"name": "Persons Composite",
			"item": [
				{
					"name": "Advanced Query",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"filters\": {\n    \"status\": \"active\",\n    \"nationality\": \"UK\"\n  },\n  \"include\": [\"addresses\", \"employment\", \"contact-details\"],\n  \"limit\": 50,\n  \"offset\": 0\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/persons/query",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"persons",
								"query"
							]
						},
						"description": "Advanced query with selective includes"
					}
				},
				{
					"name": "Upsert Person with Related Data",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"person\": {\n    \"first_name\": \"Jane\",\n    \"last_name\": \"Smith\",\n    \"email\": \"jane.smith@example.com\",\n    \"status\": \"active\"\n  },\n  \"addresses\": [\n    {\n      \"line1\": \"456 New Street\",\n      \"city\": \"Manchester\",\n      \"postcode\": \"M1 1AA\",\n      \"country\": \"UK\",\n      \"is_current_address\": true\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/persons/upsert",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"persons",
								"upsert"
							]
						},
						"description": "Upsert person with related data"
					}
				}
			]
		},
		{
			"name": "Contact Details",
			"item": [
				{
					"name": "Get Contact Details for Person",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/persons/{{personId}}/contact-details",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"persons",
								"{{personId}}",
								"contact-details"
							]
						},
						"description": "Get all contact details for a person"
					}
				},
				{
					"name": "Create Contact Detail",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"work_email_address\": \"john.doe@work.com\",\n  \"personal_email_address\": \"john.doe@personal.com\",\n  \"work_phone_number\": \"+44 20 1234 5678\",\n  \"mobile_number\": \"+44 7123 456789\",\n  \"home_phone_number\": \"+44 20 8765 4321\",\n  \"is_current\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/persons/{{personId}}/contact-details",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"persons",
								"{{personId}}",
								"contact-details"
							]
						},
						"description": "Create contact detail for a person"
					}
				}
			]
		},
		{
			"name": "Employment",
			"item": [
				{
					"name": "Get Employment for Person",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/persons/{{personId}}/employment",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"persons",
								"{{personId}}",
								"employment"
							]
						},
						"description": "Get all employment records for a person"
					}
				},
				{
					"name": "Create Employment Record",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"employment_start_date\": \"2020-01-15\",\n  \"employment_end_date\": null,\n  \"job_title_id\": \"550e8400-e29b-41d4-a716-446655440001\",\n  \"job_function_id\": \"550e8400-e29b-41d4-a716-446655440002\",\n  \"department\": \"Engineering\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/persons/{{personId}}/employment",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"persons",
								"{{personId}}",
								"employment"
							]
						},
						"description": "Create employment record for a person"
					}
				}
			]
		},
		{
			"name": "Addresses",
			"item": [
				{
					"name": "Get Addresses for Person",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/persons/{{personId}}/addresses",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"persons",
								"{{personId}}",
								"addresses"
							]
						},
						"description": "Get all addresses for a person"
					}
				},
				{
					"name": "Create Address",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"line1\": \"123 Main Street\",\n  \"line2\": \"Apartment 4B\",\n  \"city\": \"London\",\n  \"state_province\": \"Greater London\",\n  \"postcode\": \"SW1A 1AA\",\n  \"country\": \"UK\",\n  \"is_current_address\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/persons/{{personId}}/addresses",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"persons",
								"{{personId}}",
								"addresses"
							]
						},
						"description": "Create address for a person"
					}
				}
			]
		},
		{
			"name": "Passports",
			"item": [
				{
					"name": "Get Passports for Person",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/passports/{{personId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"passports",
								"{{personId}}"
							]
						},
						"description": "Get all passports for a person"
					}
				},
				{
					"name": "Create Passport",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"person_id\": \"{{personId}}\",\n  \"passport_number\": \"123456789\",\n  \"country_of_issue\": \"UK\",\n  \"issue_date\": \"2020-01-15\",\n  \"expiry_date\": \"2030-01-15\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/passports/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"passports",
								""
							]
						},
						"description": "Create new passport"
					}
				}
			]
		}
	]
}