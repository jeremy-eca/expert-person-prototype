{
  "info": {
    "name": "Person Emergency Contacts API",
    "description": "Collection for testing the Person Emergency Contacts API endpoints with HMAC JWT authentication",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.0"
  },
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Generate Test Token",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"user_id\": \"test-user\",\n  \"tenant_id\": \"{{tenant_id}}\",\n  \"service\": \"expert-persons\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/test/token",
              "host": ["{{base_url}}"],
              "path": ["api", "test", "token"]
            },
            "description": "Generate a test JWT token for authentication (development only)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data && response.data.token) {",
                  "        pm.environment.set('auth_token', response.data.token);",
                  "        console.log('Auth token set successfully');",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Emergency Contacts",
      "item": [
        {
          "name": "Get All Emergency Contacts for Person",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/persons/{{person_id}}/emergency-contacts",
              "host": ["{{base_url}}"],
              "path": ["api", "persons", "{{person_id}}", "emergency-contacts"]
            },
            "description": "Retrieves all emergency contacts for a specific person"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success property', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('success');",
                  "    pm.expect(response.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response has data array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Emergency Contact by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/emergency-contacts/{{contact_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "emergency-contacts", "{{contact_id}}"]
            },
            "description": "Retrieves a specific emergency contact by its ID"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has emergency contact data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('success', true);",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('id');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Create Emergency Contact",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Mrs\",\n  \"first_name\": \"Jane\",\n  \"last_name\": \"Doe\",\n  \"relationship\": \"Spouse\",\n  \"pronouns\": \"she/her\",\n  \"preferred_name\": \"Jane\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/persons/{{person_id}}/emergency-contacts",
              "host": ["{{base_url}}"],
              "path": ["api", "persons", "{{person_id}}", "emergency-contacts"]
            },
            "description": "Creates a new emergency contact for a specific person"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Emergency contact created successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('success', true);",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('id');",
                  "    ",
                  "    // Store the created contact ID for other tests",
                  "    pm.environment.set('contact_id', response.data.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Update Emergency Contact",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Dr\",\n  \"first_name\": \"Jane\",\n  \"last_name\": \"Smith\",\n  \"relationship\": \"Emergency Contact\",\n  \"pronouns\": \"she/her\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/emergency-contacts/{{contact_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "emergency-contacts", "{{contact_id}}"]
            },
            "description": "Updates an existing emergency contact (supports partial updates)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Emergency contact updated successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('success', true);",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data.title).to.equal('Dr');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Partial Update Emergency Contact",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"relationship\": \"Primary Emergency Contact\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/emergency-contacts/{{contact_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "emergency-contacts", "{{contact_id}}"]
            },
            "description": "Demonstrates partial update functionality - only updates the relationship field"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Partial update successful', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('success', true);",
                  "    pm.expect(response.data.relationship).to.equal('Primary Emergency Contact');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Delete Emergency Contact",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/emergency-contacts/{{contact_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "emergency-contacts", "{{contact_id}}"]
            },
            "description": "Soft deletes an emergency contact (sets deleted_at timestamp)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Emergency contact deleted successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('success', true);",
                  "    pm.expect(response).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Error Scenarios",
      "item": [
        {
          "name": "Get Non-existent Emergency Contact",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/emergency-contacts/00000000-0000-0000-0000-000000000000",
              "host": ["{{base_url}}"],
              "path": ["api", "emergency-contacts", "00000000-0000-0000-0000-000000000000"]
            },
            "description": "Tests error handling for non-existent emergency contact"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error response format', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('success', false);",
                  "    pm.expect(response).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Unauthorized Request",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/persons/{{person_id}}/emergency-contacts",
              "host": ["{{base_url}}"],
              "path": ["api", "persons", "{{person_id}}", "emergency-contacts"]
            },
            "description": "Tests authentication requirement"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set default environment variables if not set",
          "if (!pm.environment.get('base_url')) {",
          "    pm.environment.set('base_url', 'http://localhost:3001');",
          "}",
          "",
          "if (!pm.environment.get('tenant_id')) {",
          "    pm.environment.set('tenant_id', '01958944-0916-78c8-978d-d2707b71e17d');",
          "}",
          "",
          "if (!pm.environment.get('person_id')) {",
          "    // Use a test person ID - should be set manually or from a previous test",
          "    console.log('Warning: person_id not set in environment variables');",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test for response time",
          "pm.test('Response time is less than 5000ms', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "// Global test for content type",
          "if (pm.response.code !== 401 && pm.response.code !== 404) {",
          "    pm.test('Content-Type is application/json', function () {",
          "        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "    });",
          "}"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:3001",
      "type": "string"
    },
    {
      "key": "tenant_id",
      "value": "01958944-0916-78c8-978d-d2707b71e17d",
      "type": "string"
    },
    {
      "key": "auth_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "person_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "contact_id",
      "value": "",
      "type": "string"
    }
  ]
}
