{
	"info": {
		"_postman_id": "expert-persons-production-hmac",
		"name": "Expert Persons API - Production HMAC",
		"description": "Complete Expert Persons API collection with HMAC authentication for production use.\n\n## Authentication\nAll endpoints require HMAC-SHA256 authentication with the following headers:\n- `x-client-id`: Client identifier\n- `x-signature`: Base64-encoded HMAC-SHA256 signature\n- `x-timestamp`: Unix timestamp in milliseconds\n- `x-tenant-id`: Tenant identifier\n- `Content-Type`: application/json\n\n## Environment Variables\nRequired environment variables:\n- `baseUrl`: https://expert-api-persons-dev.onrender.com\n- `clientId`: Your client ID\n- `clientKey`: Your client secret key\n- `tenantId`: Your tenant ID\n\n## Pre-request Script\nEach endpoint includes the HMAC authentication pre-request script.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://expert-api-persons-dev.onrender.com",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "Health Check",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// FINAL WORKING HMAC Authentication Pre-request Script for Expert Global API",
							"const CryptoJS = require('crypto-js');",
							"",
							"const timestamp = Date.now().toString();",
							"pm.environment.set('timestamp', timestamp);",
							"",
							"const clientId = pm.environment.get('clientId');",
							"const secretKey = pm.environment.get('clientKey');",
							"const tenantId = pm.environment.get('tenantId') || 'global';",
							"",
							"console.log('Environment variables:');",
							"console.log('clientId:', clientId);",
							"console.log('secretKey:', secretKey ? 'SET' : 'MISSING');",
							"console.log('tenantId:', tenantId);",
							"",
							"if (!clientId || !secretKey) {",
							"    console.error('Missing clientId or secretKey in environment variables');",
							"    return;",
							"}",
							"",
							"const method = pm.request.method.toLowerCase();",
							"let stringToSign;",
							"",
							"if (['post', 'put', 'patch'].includes(method) && ",
							"    pm.request.body && pm.request.body.raw && pm.request.body.raw.length > 0) {",
							"    const body = pm.request.body.raw;",
							"    let bodyObj;",
							"    try {",
							"        bodyObj = JSON.parse(body);",
							"        stringToSign = JSON.stringify(bodyObj) + timestamp;",
							"    } catch (e) {",
							"        stringToSign = body + timestamp;",
							"    }",
							"    console.log('HMAC check via body');",
							"} else {",
							"    // CRITICAL FIX: Server strips /api prefix",
							"    let fullUrl = pm.request.url.toString();",
							"    let urlObj = new URL(fullUrl);",
							"    let path = urlObj.pathname;",
							"    if (path.startsWith('/api/')) {",
							"        path = path.substring(4);",
							"    }",
							"    stringToSign = path.toLowerCase() + timestamp;",
							"    console.log('HMAC check via path (server strips /api):', path);",
							"    console.log('Full resolved URL:', fullUrl);",
							"    console.log('URL pathname:', urlObj.pathname);",
							"}",
							"",
							"const signature = CryptoJS.HmacSHA256(stringToSign, secretKey).toString(CryptoJS.enc.Base64);",
							"",
							"console.log('String to sign:', stringToSign);",
							"console.log('Generated signature:', signature);",
							"",
							"// Clear and set headers",
							"pm.request.headers.remove('x-client-id');",
							"pm.request.headers.remove('x-signature');",
							"pm.request.headers.remove('x-timestamp');",
							"pm.request.headers.remove('x-tenant-id');",
							"pm.request.headers.remove('Content-Type');",
							"",
							"pm.request.headers.add({key: 'x-client-id', value: clientId});",
							"pm.request.headers.add({key: 'x-signature', value: signature});",
							"pm.request.headers.add({key: 'x-timestamp', value: timestamp});",
							"pm.request.headers.add({key: 'x-tenant-id', value: tenantId});",
							"pm.request.headers.add({key: 'Content-Type', value: 'application/json'});",
							"",
							"console.log('HMAC headers set:', {",
							"    'x-client-id': clientId,",
							"    'x-timestamp': timestamp,",
							"    'x-tenant-id': tenantId,",
							"    'method': method,",
							"    'stringToSign': stringToSign",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-client-id",
						"value": "",
						"type": "text"
					},
					{
						"key": "x-signature",
						"value": "",
						"type": "text"
					},
					{
						"key": "x-timestamp",
						"value": "",
						"type": "text"
					},
					{
						"key": "x-tenant-id",
						"value": "",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/health",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"health"
					]
				}
			}
		},
		{
			"name": "Persons",
			"item": [
				{
					"name": "Get All Persons",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// FINAL WORKING HMAC Authentication Pre-request Script for Expert Global API",
									"const CryptoJS = require('crypto-js');",
									"",
									"const timestamp = Date.now().toString();",
									"pm.environment.set('timestamp', timestamp);",
									"",
									"const clientId = pm.environment.get('clientId');",
									"const secretKey = pm.environment.get('clientKey');",
									"const tenantId = pm.environment.get('tenantId') || 'global';",
									"",
									"console.log('Environment variables:');",
									"console.log('clientId:', clientId);",
									"console.log('secretKey:', secretKey ? 'SET' : 'MISSING');",
									"console.log('tenantId:', tenantId);",
									"",
									"if (!clientId || !secretKey) {",
									"    console.error('Missing clientId or secretKey in environment variables');",
									"    return;",
									"}",
									"",
									"const method = pm.request.method.toLowerCase();",
									"let stringToSign;",
									"",
									"if (['post', 'put', 'patch'].includes(method) && ",
									"    pm.request.body && pm.request.body.raw && pm.request.body.raw.length > 0) {",
									"    const body = pm.request.body.raw;",
									"    let bodyObj;",
									"    try {",
									"        bodyObj = JSON.parse(body);",
									"        stringToSign = JSON.stringify(bodyObj) + timestamp;",
									"    } catch (e) {",
									"        stringToSign = body + timestamp;",
									"    }",
									"    console.log('HMAC check via body');",
									"} else {",
									"    // CRITICAL FIX: Server strips /api prefix",
									"    let fullUrl = pm.request.url.toString();",
									"    let urlObj = new URL(fullUrl);",
									"    let path = urlObj.pathname;",
									"    if (path.startsWith('/api/')) {",
									"        path = path.substring(4);",
									"    }",
									"    stringToSign = path.toLowerCase() + timestamp;",
									"    console.log('HMAC check via path (server strips /api):', path);",
									"    console.log('Full resolved URL:', fullUrl);",
									"    console.log('URL pathname:', urlObj.pathname);",
									"}",
									"",
									"const signature = CryptoJS.HmacSHA256(stringToSign, secretKey).toString(CryptoJS.enc.Base64);",
									"",
									"console.log('String to sign:', stringToSign);",
									"console.log('Generated signature:', signature);",
									"",
									"// Clear and set headers",
									"pm.request.headers.remove('x-client-id');",
									"pm.request.headers.remove('x-signature');",
									"pm.request.headers.remove('x-timestamp');",
									"pm.request.headers.remove('x-tenant-id');",
									"pm.request.headers.remove('Content-Type');",
									"",
									"pm.request.headers.add({key: 'x-client-id', value: clientId});",
									"pm.request.headers.add({key: 'x-signature', value: signature});",
									"pm.request.headers.add({key: 'x-timestamp', value: timestamp});",
									"pm.request.headers.add({key: 'x-tenant-id', value: tenantId});",
									"pm.request.headers.add({key: 'Content-Type', value: 'application/json'});",
									"",
									"console.log('HMAC headers set:', {",
									"    'x-client-id': clientId,",
									"    'x-timestamp': timestamp,",
									"    'x-tenant-id': tenantId,",
									"    'method': method,",
									"    'stringToSign': stringToSign",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-client-id",
								"value": "",
								"type": "text"
							},
							{
								"key": "x-signature",
								"value": "",
								"type": "text"
							},
							{
								"key": "x-timestamp",
								"value": "",
								"type": "text"
							},
							{
								"key": "x-tenant-id",
								"value": "",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/persons?limit=10&offset=0",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"persons"
							],
							"query": [
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "offset",
									"value": "0"
								}
							]
						}
					}
				},
				{
					"name": "Get Person by ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// FINAL WORKING HMAC Authentication Pre-request Script for Expert Global API",
									"const CryptoJS = require('crypto-js');",
									"",
									"const timestamp = Date.now().toString();",
									"pm.environment.set('timestamp', timestamp);",
									"",
									"const clientId = pm.environment.get('clientId');",
									"const secretKey = pm.environment.get('clientKey');",
									"const tenantId = pm.environment.get('tenantId') || 'global';",
									"",
									"console.log('Environment variables:');",
									"console.log('clientId:', clientId);",
									"console.log('secretKey:', secretKey ? 'SET' : 'MISSING');",
									"console.log('tenantId:', tenantId);",
									"",
									"if (!clientId || !secretKey) {",
									"    console.error('Missing clientId or secretKey in environment variables');",
									"    return;",
									"}",
									"",
									"const method = pm.request.method.toLowerCase();",
									"let stringToSign;",
									"",
									"if (['post', 'put', 'patch'].includes(method) && ",
									"    pm.request.body && pm.request.body.raw && pm.request.body.raw.length > 0) {",
									"    const body = pm.request.body.raw;",
									"    let bodyObj;",
									"    try {",
									"        bodyObj = JSON.parse(body);",
									"        stringToSign = JSON.stringify(bodyObj) + timestamp;",
									"    } catch (e) {",
									"        stringToSign = body + timestamp;",
									"    }",
									"    console.log('HMAC check via body');",
									"} else {",
									"    // CRITICAL FIX: Server strips /api prefix",
									"    let fullUrl = pm.request.url.toString();",
									"    let urlObj = new URL(fullUrl);",
									"    let path = urlObj.pathname;",
									"    if (path.startsWith('/api/')) {",
									"        path = path.substring(4);",
									"    }",
									"    stringToSign = path.toLowerCase() + timestamp;",
									"    console.log('HMAC check via path (server strips /api):', path);",
									"    console.log('Full resolved URL:', fullUrl);",
									"    console.log('URL pathname:', urlObj.pathname);",
									"}",
									"",
									"const signature = CryptoJS.HmacSHA256(stringToSign, secretKey).toString(CryptoJS.enc.Base64);",
									"",
									"console.log('String to sign:', stringToSign);",
									"console.log('Generated signature:', signature);",
									"",
									"// Clear and set headers",
									"pm.request.headers.remove('x-client-id');",
									"pm.request.headers.remove('x-signature');",
									"pm.request.headers.remove('x-timestamp');",
									"pm.request.headers.remove('x-tenant-id');",
									"pm.request.headers.remove('Content-Type');",
									"",
									"pm.request.headers.add({key: 'x-client-id', value: clientId});",
									"pm.request.headers.add({key: 'x-signature', value: signature});",
									"pm.request.headers.add({key: 'x-timestamp', value: timestamp});",
									"pm.request.headers.add({key: 'x-tenant-id', value: tenantId});",
									"pm.request.headers.add({key: 'Content-Type', value: 'application/json'});",
									"",
									"console.log('HMAC headers set:', {",
									"    'x-client-id': clientId,",
									"    'x-timestamp': timestamp,",
									"    'x-tenant-id': tenantId,",
									"    'method': method,",
									"    'stringToSign': stringToSign",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-client-id",
								"value": "",
								"type": "text"
							},
							{
								"key": "x-signature",
								"value": "",
								"type": "text"
							},
							{
								"key": "x-timestamp",
								"value": "",
								"type": "text"
							},
							{
								"key": "x-tenant-id",
								"value": "",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/persons/{{personId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"persons",
								"{{personId}}"
							]
						}
					}
				},
				{
					"name": "Create Person",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// FINAL WORKING HMAC Authentication Pre-request Script for Expert Global API",
									"const CryptoJS = require('crypto-js');",
									"",
									"const timestamp = Date.now().toString();",
									"pm.environment.set('timestamp', timestamp);",
									"",
									"const clientId = pm.environment.get('clientId');",
									"const secretKey = pm.environment.get('clientKey');",
									"const tenantId = pm.environment.get('tenantId') || 'global';",
									"",
									"console.log('Environment variables:');",
									"console.log('clientId:', clientId);",
									"console.log('secretKey:', secretKey ? 'SET' : 'MISSING');",
									"console.log('tenantId:', tenantId);",
									"",
									"if (!clientId || !secretKey) {",
									"    console.error('Missing clientId or secretKey in environment variables');",
									"    return;",
									"}",
									"",
									"const method = pm.request.method.toLowerCase();",
									"let stringToSign;",
									"",
									"if (['post', 'put', 'patch'].includes(method) && ",
									"    pm.request.body && pm.request.body.raw && pm.request.body.raw.length > 0) {",
									"    const body = pm.request.body.raw;",
									"    let bodyObj;",
									"    try {",
									"        bodyObj = JSON.parse(body);",
									"        stringToSign = JSON.stringify(bodyObj) + timestamp;",
									"    } catch (e) {",
									"        stringToSign = body + timestamp;",
									"    }",
									"    console.log('HMAC check via body');",
									"} else {",
									"    // CRITICAL FIX: Server strips /api prefix",
									"    let fullUrl = pm.request.url.toString();",
									"    let urlObj = new URL(fullUrl);",
									"    let path = urlObj.pathname;",
									"    if (path.startsWith('/api/')) {",
									"        path = path.substring(4);",
									"    }",
									"    stringToSign = path.toLowerCase() + timestamp;",
									"    console.log('HMAC check via path (server strips /api):', path);",
									"    console.log('Full resolved URL:', fullUrl);",
									"    console.log('URL pathname:', urlObj.pathname);",
									"}",
									"",
									"const signature = CryptoJS.HmacSHA256(stringToSign, secretKey).toString(CryptoJS.enc.Base64);",
									"",
									"console.log('String to sign:', stringToSign);",
									"console.log('Generated signature:', signature);",
									"",
									"// Clear and set headers",
									"pm.request.headers.remove('x-client-id');",
									"pm.request.headers.remove('x-signature');",
									"pm.request.headers.remove('x-timestamp');",
									"pm.request.headers.remove('x-tenant-id');",
									"pm.request.headers.remove('Content-Type');",
									"",
									"pm.request.headers.add({key: 'x-client-id', value: clientId});",
									"pm.request.headers.add({key: 'x-signature', value: signature});",
									"pm.request.headers.add({key: 'x-timestamp', value: timestamp});",
									"pm.request.headers.add({key: 'x-tenant-id', value: tenantId});",
									"pm.request.headers.add({key: 'Content-Type', value: 'application/json'});",
									"",
									"console.log('HMAC headers set:', {",
									"    'x-client-id': clientId,",
									"    'x-timestamp': timestamp,",
									"    'x-tenant-id': tenantId,",
									"    'method': method,",
									"    'stringToSign': stringToSign",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-client-id",
								"value": "",
								"type": "text"
							},
							{
								"key": "x-signature",
								"value": "",
								"type": "text"
							},
							{
								"key": "x-timestamp",
								"value": "",
								"type": "text"
							},
							{
								"key": "x-tenant-id",
								"value": "",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"first_name\": \"John\",\n  \"last_name\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"date_of_birth\": \"1990-01-01\",\n  \"gender\": \"Male\",\n  \"nationality\": \"US\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/persons",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"persons"
							]
						}
					}
				}
			]
		}
	]
}